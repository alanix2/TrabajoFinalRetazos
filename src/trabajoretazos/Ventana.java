/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabajoretazos;

//importamos las librerías necesarias
import java.io.BufferedReader; //librería para leer archivos de texto
import java.io.BufferedWriter; //librería para escribir archivos de texto
import java.io.File; //librería para manejar archivos
import java.io.FileReader; //librería para leer archivos de texto
import java.io.FileWriter; //librería para escribir archivos de texto
import java.io.IOException; //librería para manejar excepciones de entrada/salida
import java.io.PrintWriter; //librería para escribir archivos de texto
import javax.swing.JFileChooser; //librería para crear un filechooser
import javax.swing.table.DefaultTableModel; //librería para crear un modelo de tabla
import javax.swing.table.TableRowSorter; //librería para ordenar filas de una tabla
import javax.swing.table.TableModel; //librería para crear un modelo de tabla
import java.awt.Color; //librería para manejar colores
import java.text.DecimalFormat; //librería para formatear números
import java.text.DecimalFormatSymbols;
import java.util.ArrayList; //librería para crear listas
import java.util.Arrays; //librería para manejar arrays
import java.util.Iterator; //librería para recorrer listas
import javax.swing.JOptionPane; //librería para mostrar mensajes
import javax.swing.RowSorter; //librería para ordenar filas de una tabla
import javax.swing.SortOrder; //librería para ordenar filas de una tabla
import java.util.List; //librería para crear listas
import java.util.Random; //librería para generar números aleatorios

/**
 *
 * @author Alumnos
 */
public class Ventana extends javax.swing.JFrame {


    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        getContentPane().setBackground(Color.BLACK);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        BotonCargar = new javax.swing.JButton();
        BotonBuscar = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        BotonBorrarTabla = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        BotonSalirBusqueda = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        BotonAgregarRetazo = new javax.swing.JButton();
        BotonEliminarRetazo = new javax.swing.JButton();
        BotonGuardarCambios = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Retazos");
        setResizable(false);

        jTable1.setBackground(new java.awt.Color(0, 0, 0));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código de retazo", "Largo (cm)", "Ancho (cm)", "Espesor (mm)", "Desperdicio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        BotonCargar.setBackground(new java.awt.Color(0, 0, 0));
        BotonCargar.setForeground(new java.awt.Color(255, 255, 255));
        BotonCargar.setText("Cargar");
        BotonCargar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCargarActionPerformed(evt);
            }
        });
        BotonCargar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BotonCargarKeyPressed(evt);
            }
        });

        BotonBuscar.setBackground(new java.awt.Color(0, 0, 0));
        BotonBuscar.setForeground(new java.awt.Color(255, 255, 255));
        BotonBuscar.setText("Buscar en la tabla");
        BotonBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonBuscar.setEnabled(false);
        BotonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBuscarActionPerformed(evt);
            }
        });
        BotonBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BotonBuscarKeyPressed(evt);
            }
        });

        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Largo");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Ancho");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Espesor");

        BotonBorrarTabla.setBackground(new java.awt.Color(0, 0, 0));
        BotonBorrarTabla.setForeground(new java.awt.Color(255, 255, 255));
        BotonBorrarTabla.setText("Borrar Tabla");
        BotonBorrarTabla.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonBorrarTabla.setEnabled(false);
        BotonBorrarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBorrarTablaActionPerformed(evt);
            }
        });
        BotonBorrarTabla.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BotonBorrarTablaKeyPressed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));

        BotonSalirBusqueda.setBackground(new java.awt.Color(0, 0, 0));
        BotonSalirBusqueda.setForeground(new java.awt.Color(255, 255, 255));
        BotonSalirBusqueda.setText("Salir de Busqueda");
        BotonSalirBusqueda.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonSalirBusqueda.setEnabled(false);
        BotonSalirBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonSalirBusquedaActionPerformed(evt);
            }
        });
        BotonSalirBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BotonSalirBusquedaKeyPressed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Ruta anterior:");

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));

        BotonAgregarRetazo.setBackground(new java.awt.Color(0, 0, 0));
        BotonAgregarRetazo.setForeground(new java.awt.Color(255, 255, 255));
        BotonAgregarRetazo.setText("Agregar retazo");
        BotonAgregarRetazo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonAgregarRetazo.setEnabled(false);
        BotonAgregarRetazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAgregarRetazoActionPerformed(evt);
            }
        });
        BotonAgregarRetazo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BotonAgregarRetazoKeyPressed(evt);
            }
        });

        BotonEliminarRetazo.setBackground(new java.awt.Color(0, 0, 0));
        BotonEliminarRetazo.setForeground(new java.awt.Color(255, 255, 255));
        BotonEliminarRetazo.setText("Eliminar Retazo");
        BotonEliminarRetazo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonEliminarRetazo.setEnabled(false);
        BotonEliminarRetazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEliminarRetazoActionPerformed(evt);
            }
        });
        BotonEliminarRetazo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BotonEliminarRetazoKeyPressed(evt);
            }
        });

        BotonGuardarCambios.setBackground(new java.awt.Color(0, 0, 0));
        BotonGuardarCambios.setForeground(new java.awt.Color(255, 255, 255));
        BotonGuardarCambios.setText("Guardar Cambios");
        BotonGuardarCambios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BotonGuardarCambios.setEnabled(false);
        BotonGuardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGuardarCambiosActionPerformed(evt);
            }
        });
        BotonGuardarCambios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BotonGuardarCambiosKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(32, 32, 32))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(BotonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(BotonCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BotonBorrarTabla, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                    .addComponent(BotonSalirBusqueda, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                    .addComponent(BotonAgregarRetazo, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                    .addComponent(BotonEliminarRetazo, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                    .addComponent(BotonGuardarCambios, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotonCargar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BotonGuardarCambios, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BotonSalirBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotonBorrarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(BotonAgregarRetazo, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BotonBuscar)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BotonEliminarRetazo, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /* este es un programa para administrar retazos de vidrio, 
    en el cual se pueden cargar retazos desde un archivo de texto, 
    buscar retazos por medidas en un modo de busqueda, 
    agregar retazos, eliminar retazos 
    y guardar los cambios en el archivo de texto.*/
    private boolean BuscarPresionado = false; //variable para saber si se presionó el botón de buscar
    private String largo, ancho, espesor, rutaArchivo, codigoRetazo;  //variables para las medidas, código de retazo y ruta de archivo	
    private DefaultTableModel tablaModelo; //Creamos el modelo de la tabla
    private double largoBuscar, anchoBuscar, espesorBuscar; //variables para las medidas de busqueda
    private double largoSelec, anchoSelec, espesorSelec; //variables para las medidas del retazo seleccionado en la busqueda
    private List<String[]> datosOriginales = new ArrayList<>(); //creamos una lista para guardar los datos originales de la tabla
    private DecimalFormat fo = new DecimalFormat("##.##"); //creamos un formato para los números
    private DecimalFormatSymbols customSymbols = new DecimalFormatSymbols();

    private void BotonCargarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BotonCargarKeyPressed
        // si la tecla presionada es enter, se ejecuta el metodo correspondiente. 
        // Es lo mismo para el resto de KeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            BotonCargarActionPerformed(null);
        }
        

    }//GEN-LAST:event_BotonCargarKeyPressed

    private void BotonBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BotonBuscarKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            BotonBuscarActionPerformed(null);
        }
    }//GEN-LAST:event_BotonBuscarKeyPressed
  
    private void BotonBorrarTablaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BotonBorrarTablaKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            BotonBorrarTablaActionPerformed(null);
        }
    }//GEN-LAST:event_BotonBorrarTablaKeyPressed

    private void BotonSalirBusquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BotonSalirBusquedaKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            BotonSalirBusquedaActionPerformed(null);
        }  
    }//GEN-LAST:event_BotonSalirBusquedaKeyPressed

    private String generarCodigo() {
        //genera un código de retazo para los nuevos retazos o sobrantes
        Random r = new Random(); //creamos un random
        String abecedario = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; //creamos un string con el abecedario
        char randomChar = abecedario.charAt(r.nextInt(abecedario.length())); //seleccionamos una letra aleatoria del abecedario
        int randomNum = r.nextInt(1000); //seleccionamos un número aleatorio entre 0 y 999
        return randomChar + String.format("%03d", randomNum); //devolvemos el código de retazo generado
    }

    private void BotonAgregarRetazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAgregarRetazoActionPerformed
       
        // Leer los valores de las medidas
        largo = jTextField1.getText().replace(",", ".");
        ancho = jTextField2.getText().replace(",", ".");
        espesor = jTextField3.getText().replace(",", ".");

        // Verifica si los campos de texto están vacíos
        if (largo.isEmpty() || ancho.isEmpty() || espesor.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, rellene todos los campos.");
            return;
        }

        // Verificar si los campos de texto contienen datos válidos
        try {
            Double.parseDouble(largo);
            Double.parseDouble(ancho);
            Double.parseDouble(espesor);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese números válidos.");
            return;
        }

        // Generar un código de retazo aleatorio
        codigoRetazo = generarCodigo();

        // Agregar los valores a la tabla
        tablaModelo = (DefaultTableModel) jTable1.getModel();
        String[] NuevoRetazoFila = {codigoRetazo, largo, ancho, espesor};
        tablaModelo.addRow(NuevoRetazoFila);

        BotonGuardarCambios.setEnabled(true);
    }//GEN-LAST:event_BotonAgregarRetazoActionPerformed

    private void BotonAgregarRetazoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BotonAgregarRetazoKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            BotonAgregarRetazoActionPerformed(null);
        }
    }//GEN-LAST:event_BotonAgregarRetazoKeyPressed

    private void BotonEliminarRetazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEliminarRetazoActionPerformed
        tablaModelo = (DefaultTableModel) jTable1.getModel();

        if (tablaModelo.getRowCount() == 0) { //si se obtienen 0 filas (tabla vacía), se muestra un mensaje
            JOptionPane.showMessageDialog(this, "No hay ningún retazo para eliminar.");
            return;
        }
        // Obtener el retazo seleccionado en la tabla
        int elegirFila = jTable1.getSelectedRow(); //obtenemos la fila seleccionada
        if (elegirFila == -1) { //si no se selecciona ninguna fila, se muestra un mensaje
            JOptionPane.showMessageDialog(this, "No se seleccionó ningún retazo.");
            return;
        }

        // Eliminar el retazo seleccionado de la tabla
        tablaModelo.removeRow(elegirFila);

        BotonGuardarCambios.setEnabled(true);
    }//GEN-LAST:event_BotonEliminarRetazoActionPerformed

    private void BotonEliminarRetazoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BotonEliminarRetazoKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
        BotonEliminarRetazoActionPerformed(null);
        }
    }//GEN-LAST:event_BotonEliminarRetazoKeyPressed

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            BotonBuscarActionPerformed(null);
        }
    }//GEN-LAST:event_jTextField3KeyPressed

    private void BotonGuardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGuardarCambiosActionPerformed
        
        // Guardamos todos los retazos de la tabla en una lista
        List<String> todosLosRetazos = new ArrayList<>();
        for (int i = 0; i < tablaModelo.getRowCount(); i++) {
            String codigoRetazo = (String) tablaModelo.getValueAt(i, 0);
            String largo = (String) tablaModelo.getValueAt(i, 1);
            String ancho = (String) tablaModelo.getValueAt(i, 2);
            String espesor = (String) tablaModelo.getValueAt(i, 3);
            todosLosRetazos.add(codigoRetazo + ";" + largo + ";" + ancho + ";" + espesor);
        }

        // Sobreescribimos el archivo de texto con la lista de retazos actualizada
        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(rutaArchivo)))) { 
            for (String line : todosLosRetazos) { //escribimos cada línea de la lista en el archivo
                line = line.replaceAll("\\.", ",");
                out.println(line); // escribimos el retazo en el archivo
            }
        } catch (IOException e) {
            System.out.println("Error al escribir en el archivo: " + e.getMessage());
        }
        JOptionPane.showMessageDialog(this, "Cambios guardados.");
        BotonGuardarCambios.setEnabled(false);
    }//GEN-LAST:event_BotonGuardarCambiosActionPerformed

    private void BotonGuardarCambiosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BotonGuardarCambiosKeyPressed
        BotonGuardarCambiosActionPerformed(null);
    }//GEN-LAST:event_BotonGuardarCambiosKeyPressed

//<-- Toda esta sección es para el modo de búsqueda

    private void SeleccionRetazoBuscado() {
        /* ESTO ES MAS COMPLICADO DE LO QUE PENSABA ME CAGO EN DIOS */
        
        // Obtener el retazo seleccionado en la tabla
        int elegirFila = jTable1.getSelectedRow(); //obtenemos la fila seleccionada

        //obtenemos los datos del retazo seleccionado
        codigoRetazo = (String) jTable1.getValueAt(elegirFila, 0);
        largo = (String) jTable1.getValueAt(elegirFila, 1);
        ancho = (String) jTable1.getValueAt(elegirFila, 2);
        espesor = (String) jTable1.getValueAt(elegirFila, 3);

        //creamos una lista con los datos del retazo seleccionado para cuando se elimine
        ArrayList<String> datosFila = new ArrayList<>();
        datosFila.add(codigoRetazo);
        datosFila.add(largo);
        datosFila.add(ancho);
        datosFila.add(espesor);

        largoSelec = Double.parseDouble(largo);
        anchoSelec = Double.parseDouble(ancho); 
        espesorSelec = Double.parseDouble(espesor);
        
        if (sonMedidasIguales(largoBuscar, largoSelec, anchoBuscar, anchoSelec)) {
            //Acá quiero que al seleccionar un retazo, se cargue la tabla con el retazo seleccionado eliminado, ya que no hay sobrante
            EliminarRetazoBuscado(datosFila.toArray(new String[0]));
            
            // Salir del modo de búsqueda y recargar los datos
            BotonSalirBusquedaActionPerformed(null);
            
            // Habilitar el botón de guardar cambios
            BotonGuardarCambios.setEnabled(true);

        } else if(SoloUnLadoEsIgual(largoBuscar, largoSelec, anchoBuscar, anchoSelec)){
            //Si el retazo seleccionado tiene un lado igual al retazo buscado, se elimina el retazo seleccionado y se agrega el sobrante
            EliminarRetazoBuscado(datosFila.toArray(new String[0]));

            //creamos el sobrante y lo agregamos a la lista de datos originales
            UnSobrante(codigoRetazo, largoSelec, anchoSelec, espesorSelec, largoBuscar, anchoBuscar);

            BotonSalirBusquedaActionPerformed(null);

        }else if(DosLadosDistintos(largoBuscar, largoSelec, anchoBuscar, anchoSelec)){
            //si los dos lados del retazo seleccionado son mayores a los del retazo buscado, se elimina el retazo seleccionado y se agregan dos sobrantes
            EliminarRetazoBuscado(datosFila.toArray(new String[0]));

            //creamos los sobrantes y los agregamos a la lista de datos originales
            DosSobrantes(codigoRetazo, largoSelec, anchoSelec, espesorSelec, largoBuscar, anchoBuscar);

            BotonSalirBusquedaActionPerformed(null);

        }
        BotonGuardarCambios.setEnabled(true);
    }

    private boolean sonMedidasIguales(double largoBuscar, double largoSelec, double anchoBuscar, double anchoSelec) {
        
        return (largoBuscar == largoSelec && anchoBuscar == anchoSelec) 
            || (largoBuscar == anchoSelec && anchoBuscar == largoSelec);
    }
    
    private boolean SoloUnLadoEsIgual(double largoBuscar, double largoSelec, double anchoBuscar, double anchoSelec) {
        return (largoBuscar == largoSelec && anchoBuscar < anchoSelec)
            || (largoBuscar == anchoSelec && anchoBuscar < largoSelec)
            || (largoBuscar < largoSelec && anchoBuscar == anchoSelec)
            || (largoBuscar < anchoSelec && anchoBuscar == largoSelec);
    }
    
    private boolean DosLadosDistintos(double largoBuscar, double largoSelec, double anchoBuscar, double anchoSelec) {
        return (largoBuscar < largoSelec && anchoBuscar < anchoSelec)
            || (largoBuscar < anchoSelec && anchoBuscar < largoSelec);
    }

    private void EliminarRetazoBuscado(String[] datosFila) {
        //elimina el retazo seleccionado de la lista de datos originales
        for (Iterator<String[]> iterator = datosOriginales.iterator(); iterator.hasNext();) { //recorremos la lista de datos originales
            String[] filaActual = iterator.next(); //obtenemos la fila actual
            if (Arrays.equals(filaActual, datosFila)) { //si la fila actual es igual a la fila seleccionada
                iterator.remove(); //eliminamos la fila actual de la lista de datos originales
            }
        }

    }

    private void UnSobrante(String codigoRetazo, double largoSelec, double anchoSelec, double espesorSelec, double largoBuscar, double anchoBuscar) {
        customSymbols.setDecimalSeparator('.');
        fo.setDecimalFormatSymbols(customSymbols);
        
        //creamos el sobrante y lo agregamos a la lista de datos originales
        double largoSobrante = Math.max(largoSelec, anchoSelec); //el largo del sobrante es el lado mayor del retazo seleccionado
        double anchoSobrante = Math.min(largoSelec, anchoSelec) - Math.min(largoBuscar, anchoBuscar);  //el ancho del sobrante es el lado menor del retazo seleccionado menos el lado menor del retazo buscado

        String[] sobrante = new String[4];
        sobrante[0] = codigoRetazo; 
        sobrante[1] = fo.format(largoSobrante);
        sobrante[2] = fo.format(anchoSobrante);
        sobrante[3] = fo.format(espesorSelec);
        datosOriginales.add(sobrante);
    }

    private void DosSobrantes(String codigoRetazo, double largoSelec, double anchoSelec, double espesorSelec, double largoBuscar, double anchoBuscar) {
        customSymbols.setDecimalSeparator('.');
        fo.setDecimalFormatSymbols(customSymbols);
        
        //creamos los sobrantes y los agregamos a la lista de datos originales
        double largoSobrante1 = (Math.max(largoSelec, anchoSelec) - Math.max(largoBuscar, anchoBuscar)); //el largo del primer sobrante es el lado mayor del retazo seleccionado menos el lado mayor del retazo buscado
        double anchoSobrante1 = Math.min(largoSelec, anchoSelec); //el ancho del primer sobrante es el lado menor del retazo seleccionado
        double largoSobrante2 = Math.max(largoSelec, anchoSelec) - largoSobrante1; //el largo del segundo sobrante es el lado mayor del retazo seleccionado menos el largo del primer sobrante
        double anchoSobrante2 = Math.min(largoSelec, anchoSelec) - Math.min(largoBuscar, anchoBuscar); //el ancho del segundo sobrante es el lado menor del retazo seleccionado menos el lado menor del retazo buscado
        
        // Primer sobrante
        String[] sobrante1 = new String[4];
        sobrante1[0] = codigoRetazo; 
        sobrante1[1] = fo.format(largoSobrante1);
        sobrante1[2] = fo.format(anchoSobrante1);
        sobrante1[3] = fo.format(espesorSelec);
        datosOriginales.add(sobrante1);

        // Segundo sobrante
        String[] sobrante2 = new String[4];
        sobrante2[0] = generarCodigo(); 
        sobrante2[1] = fo.format(largoSobrante2);
        sobrante2[2] = fo.format(anchoSobrante2);
        sobrante2[3] = fo.format(espesorSelec);
        datosOriginales.add(sobrante2);
    }

 //fin de sección de modo de búsqueda -->

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) { //dobleclic
            if (BuscarPresionado == false) { //si no está en modo de busqueda, se elimina el retazo seleccionado
                BotonEliminarRetazoActionPerformed(null);
            } else if (BuscarPresionado == true) { //si está en modo de busqueda, se ejecuta el metodo
                SeleccionRetazoBuscado();
            }
        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void CargarArchivoATabla() {
        tablaModelo.setRowCount(0); //Borra todas las filas de la tabla
        datosOriginales.clear(); // Borra la lista de datos originales
        try (BufferedReader br = new BufferedReader(new FileReader(rutaArchivo))) { 
            String linea; 
            while ((linea = br.readLine()) != null) { // Lee cada línea del archivo
                linea = linea.replaceAll("\\,", "."); // Reemplaza las comas por puntos
                String[] InfoStock = linea.split(";"); // Divide la línea en un array de Strings
                tablaModelo.addRow(InfoStock); // Agrega el array a la tabla
                datosOriginales.add(InfoStock.clone()); // Agrega el array a la lista de datos originales
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo: " + ex.getMessage());
        }
    }

    private void BotonCargarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
        tablaModelo = (DefaultTableModel) jTable1.getModel(); // Crea el modelo de la tabla
        JFileChooser fileChooser = new JFileChooser(); // Crea el fileChooser
        fileChooser.setCurrentDirectory(null); //Asigna el directorio del filechooser. null = directorio por defecto
        int result = fileChooser.showOpenDialog(null); // Abre el fileChooser
        if (result != JFileChooser.APPROVE_OPTION) { 
            return; // Si no se selecciona ningún archivo, no hace nada
        }
        File archivo = fileChooser.getSelectedFile(); // Guarda el archivo seleccionado
        rutaArchivo = archivo.getAbsolutePath(); // Guarda la ruta del archivo
        jLabel4.setText(archivo.getAbsolutePath()); // Muestra la ruta del archivo en la ventana
    
        CargarArchivoATabla();
        // Si el archivo se cargó correctamente, habilita los otros botones
        BotonBuscar.setEnabled(true);
        BotonBorrarTabla.setEnabled(true);
        BotonAgregarRetazo.setEnabled(true);
        BotonEliminarRetazo.setEnabled(true);
        BotonGuardarCambios.setEnabled(false);
    }// GEN-LAST:event_jButton1ActionPerformed

//<-- Esta sección es para buscar retazos en la tabla

    private void BotonBuscarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
        customSymbols.setDecimalSeparator('.');
        fo.setDecimalFormatSymbols(customSymbols);
        
        tablaModelo = (DefaultTableModel) jTable1.getModel();
        boolean hayResultados = false; // Variable para saber si se encontraron resultados
        String linea;
        //Asigna los campos de texto a las variables double
        
        try {
            largoBuscar = Double.parseDouble(jTextField1.getText().replace(",", ".")); //reemplaza las comas por puntos
            anchoBuscar = Double.parseDouble(jTextField2.getText().replace(",", "."));
            espesorBuscar = Double.parseDouble(jTextField3.getText().replace(",", "."));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: Ingrese un número válido.");
            return;
        }
        
        
        File archivo = new File(rutaArchivo); // Crea un archivo con la ruta del archivo cargado

        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            
            tablaModelo.setRowCount(0); // Borra todas las filas de la tabla
            while ((linea = br.readLine()) != null) {
                linea = linea.replaceAll(",", "."); // Reemplaza las comas por puntos
                String[] infoStock = linea.split(";");  // Divide la línea en un array de Strings
    
                double largo = Double.parseDouble(infoStock[1]);
                double ancho = Double.parseDouble(infoStock[2]);
                double espesor = Double.parseDouble(infoStock[3]);
                
                // Calcula el porcentaje de desperdicio
                double area = largo * ancho;
                double areaBuscada = largoBuscar * anchoBuscar;
                double desperdicio = area - areaBuscada;
                double porcentajeDesperdicio = (desperdicio / area) * 100; 
                String porcentajeFormato = fo.format(porcentajeDesperdicio);

                // Agrega los retazos que coinciden con las medidas buscadas a la tabla
                if (BuscarRetazo(largo, ancho, espesor, largoBuscar, anchoBuscar, espesorBuscar)) { //si las medidas buscadas coinciden con las medidas del retazo
                    agregarFilaATabla(tablaModelo, infoStock, porcentajeFormato); //agregamos el retazo a la tabla
                    hayResultados = true; // Se encontraron resultados
                }               
            }
            
            // Ordena la tabla por porcentaje de desperdicio
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(tablaModelo); //creamos un ordenador de filas
            jTable1.setRowSorter(sorter); //asignamos el ordenador a la tabla
            List<RowSorter.SortKey> sortKeys = new ArrayList<>(); //creamos una lista de claves de ordenación
            sortKeys.add(new RowSorter.SortKey(4, SortOrder.ASCENDING)); //añadimos una clave de ordenación por la columna 4 (porcentaje de desperdicio) en orden ascendente
            sorter.setSortKeys(sortKeys); //asignamos la lista de claves de ordenación al ordenador
            sorter.sort(); //ordenamos la tabla

        } catch (IOException ex) { 
            JOptionPane.showMessageDialog(this, "Hubo un error al leer el archivo: " + ex.getMessage());
        }

        if (!hayResultados) { //esto es un operador de negación. Si no hay resultados, se muestra un mensaje
            JOptionPane.showMessageDialog(this, "No se encontraron resultados.");
            BotonSalirBusquedaActionPerformed(null); //salimos del modo de busqueda
            return;
        }

        BotonAgregarRetazo.setEnabled(false);
        BotonEliminarRetazo.setEnabled(false);
        BotonGuardarCambios.setEnabled(false);
        BotonSalirBusqueda.setEnabled(true);
        BuscarPresionado = true; //se presionó el botón de buscar
    }// GEN-LAST:event_jButton2ActionPerformed

    private boolean BuscarRetazo(double largo, double ancho, double espesor, double largoBuscar, double anchoBuscar, double espesorBuscar) {
        //verifica si las medidas buscadas son iguales o menores a las medidas del retazo
        //comparamos el ancho y el largo del retazo con el ancho y el largo buscados
        
        return (largoBuscar <= largo && anchoBuscar <= ancho && espesorBuscar == espesor)
            || (largoBuscar <= ancho && anchoBuscar <= largo && espesorBuscar == espesor);
               
    }
    
    private void agregarFilaATabla(DefaultTableModel tablaModelo, String[] infoStock, String string) {
        //agrega la fila de los resultados a la tabla
        String[] fila = {infoStock[0], infoStock[1], infoStock[2], infoStock[3], string + "%", };
        tablaModelo.addRow(fila);
    }

//fin de sección de busqueda -->    

    private void BotonBorrarTablaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton3ActionPerformed
        tablaModelo = (DefaultTableModel) jTable1.getModel();
        //esencialmente sería para borrar la tabla y tener que volver a cargar un archivo
        //Se borran las filas
        tablaModelo.setRowCount(0);
        jLabel4.setText(null);
        BotonAgregarRetazo.setEnabled(false);
        BotonEliminarRetazo.setEnabled(false);
        BotonGuardarCambios.setEnabled(false);
        BotonBorrarTabla.setEnabled(false);
        BotonBuscar.setEnabled(false);
        BotonSalirBusqueda.setEnabled(true);
    }// GEN-LAST:event_jButton3ActionPerformed

    private void BotonSalirBusquedaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton4ActionPerformed
        //anteriormente "restaurar tabla"
        //Vuelve a cargar la tabla luego de buscar

        //borra la tabla
        tablaModelo.setRowCount(0);
    
        // Restaurar los datos originales
        for (String[] fila : datosOriginales) {;
            tablaModelo.addRow(fila);
        }
        
        //pasa a false para indicar que se salió del modo de busqueda
        BuscarPresionado = false;
        
        //borra los campos de texto
        jTextField1.setText(null);
        jTextField2.setText(null);
        jTextField3.setText(null);

        //habilita los botones
        BotonBuscar.setEnabled(true);
        BotonBorrarTabla.setEnabled(true);
        BotonAgregarRetazo.setEnabled(true);
        BotonEliminarRetazo.setEnabled(true);
        BotonSalirBusqueda.setEnabled(false);
    }// GEN-LAST:event_jButton4ActionPerformed
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton BotonAgregarRetazo;
    public javax.swing.JButton BotonBorrarTabla;
    public javax.swing.JButton BotonBuscar;
    public javax.swing.JButton BotonCargar;
    public javax.swing.JButton BotonEliminarRetazo;
    public javax.swing.JButton BotonGuardarCambios;
    public javax.swing.JButton BotonSalirBusqueda;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel8;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    public javax.swing.JTextField jTextField1;
    public javax.swing.JTextField jTextField2;
    public javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

}
